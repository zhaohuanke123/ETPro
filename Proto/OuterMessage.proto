syntax = "proto3";
package ET;

//ResponseType M2C_TestResponse
message C2M_TestRequest // IActorLocationRequest
{
	int32 RpcId = 90;
	string request = 1;
}

message M2C_TestResponse // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string response = 1;
}

//ResponseType Actor_TransferResponse
message Actor_TransferRequest // IActorLocationRequest
{
	int32 RpcId = 90;
	int32 MapIndex = 1;
}

message Actor_TransferResponse // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType G2C_EnterMap
message C2G_EnterMap // IRequest
{
	int32 RpcId = 1;
}

message G2C_EnterMap // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	// 自己unitId
	int64 MyId = 4;
}

//ResponseType G2C_EnterChessMap
message C2G_EnterChessMap // IRequest
{
	int32 RpcId = 1;
}

message G2C_EnterChessMap // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 MyId = 4;
	int64 SceneInstanceId = 5;
	string SceneName = 6;
}

//ResponseType G2C_ExitMap
message C2G_ExitMap // IRequest
{
	int32 RpcId = 1;
}

message G2C_ExitMap // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

message MoveInfo
{
	repeated float X = 1;
	repeated float Y = 2;
	repeated float Z = 3;

	float A = 4;
	float B = 5;
	float C = 6;
	float W = 7;
	int32 TurnSpeed = 8;
}

message UnitInfo
{
	int64 UnitId = 1;
	int32 ConfigId = 2;
	int32 Type = 3;
	float X = 4;
	float Y = 5;
	float Z = 6;
	float ForwardX = 7;
	float ForwardY = 8;
	float ForwardZ = 9;
	repeated int32 Ks = 10;
	repeated int64 Vs = 11;
	MoveInfo MoveInfo = 12;
	repeated int32 SkillIds = 13;
	repeated int32 BuffIds = 14;
	repeated int64 BuffTimestamp = 15;
	repeated int64 BuffSourceIds = 16;
	int32 Camp = 17;
}

message M2C_CreateUnits // IActorMessage
{
	repeated UnitInfo Units = 2;
}

message M2C_CreateMyUnit // IActorMessage
{
	UnitInfo Unit = 1;
	repeated int32 GuidanceDone = 2;
}

message M2C_StartSceneChange // IActorMessage
{
	int64 SceneInstanceId = 1;
	string SceneName = 2;	
}

message M2C_StartSceneChangeToLogin // IActorMessage
{

}

message M2C_RemoveUnits // IActorMessage
{
	repeated int64 Units = 2;
}

message C2M_PathfindingResult // IActorLocationMessage
{
	int32 RpcId = 90;

	float X = 1;
	float Y = 2;
	float Z = 3;
}

message C2M_Stop // IActorLocationMessage
{
	int32 RpcId = 90;
}

message M2C_PathfindingResult // IActorMessage
{
	int64 Id = 1;

	float X = 2;
	float Y = 3;
	float Z = 4;

	repeated float Xs = 5;
	repeated float Ys = 6;
	repeated float Zs = 7;
}

message M2C_Stop // IActorMessage
{
	int32 Error = 1;

	int64 Id = 2;
	float X = 3;
	float Y = 4;
	float Z = 5;

	float A = 6;
	float B = 7;
	float C = 8;
	float W = 9;
}

//ResponseType G2C_Ping
message C2G_Ping // IRequest
{
	int32 RpcId = 90;
}

message G2C_Ping // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;

	int64 Time = 1;
}


message G2C_Test // IMessage
{
}

//ResponseType M2C_Reload
message C2M_Reload // IRequest
{
	int32 RpcId = 90;
	string Account = 1;
	string Password = 2;
}

message M2C_Reload // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType R2C_Register
message C2R_Register // IRequest
{
	int32 RpcId = 90;
	string  Account = 1;  // 帐号
	string  Password = 2;  // 密码
}

message R2C_Register // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType R2C_Login
message C2R_Login // IRequest
{
	int32 RpcId = 90;
	string  Account = 1;  // 帐号
	string  Password = 2;  // 密码
}

message R2C_Login // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string Address = 1;
	int64 Key = 2;
	int64 GateId = 3;
}

//ResponseType G2C_Logout
message C2G_Logout // IRequest
{
	int32 RpcId = 90;
}

message G2C_Logout // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType G2C_LoginGate
message C2G_LoginGate // IRequest
{
	int32 RpcId = 90;
	int64 Key = 1;  // 帐号
	int64 GateId = 2;
}

message G2C_LoginGate // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int64 PlayerId = 1;
}

message G2C_TestHotfixMessage // IMessage
{
	string Info = 1;
}

//ResponseType M2C_TestRobotCase
message C2M_TestRobotCase // IActorLocationRequest
{
	int32 RpcId = 90;
	int32 N = 1;
}

message M2C_TestRobotCase // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int32 N = 1;
}

//ResponseType M2C_TransferMap
message C2M_TransferMap // IActorLocationRequest
{
	int32 RpcId = 1;
}

message M2C_TransferMap // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}
 

message C2M_UseSkill // IActorLocationMessage
{
	int32 RpcId = 90;
	
	int32 SkillConfigId = 1;
	int64 Id = 2;
	float X = 3;
	float Y = 4;
	float Z = 5;
}

message M2C_UseSkill // IActorMessage
{
	int32 Error = 1;
	int32 SkillConfigId = 2;
	int64 Sender = 3;
	int64 Reciver = 4;
	float X = 5;
	float Y = 6;
	float Z = 7;
}

message M2C_AddBuff // IActorMessage
{
	int32 Error = 1;
	int32 ConfigId = 2;
	int64 Timestamp = 3;
	int64 UnitId = 4;
	int64 SourceId = 5;
}

message M2C_Damage // IActorMessage
{
	int32 Error = 1;
	int64 FromId = 2;
	int64 ToId = 3;
	int64 Damage = 4;
	int64 NowBase = 5;
}

message M2C_ChangeSkillGroup // IActorMessage
{
	int32 Error = 1;
	int64 UnitId = 2;
	int32 Result = 3;
	int64 Timestamp = 4;
}

message M2C_RemoveBuff // IActorMessage
{
	int32 Error = 1;
	int32 ConfigId = 2;
	int64 Timestamp = 3;
	int64 UnitId = 4;
}

message M2C_Interrupt // IActorMessage
{
	int32 Error = 1;
	int32 ConfigId = 2;
	int64 Timestamp = 3;
	int64 UnitId = 4;
}

//ResponseType M2C_TestActotLocationResponse
message C2M_TestActorLocationRequest // IActorLocationRequest
{
	int32 RpcId = 90;
	string Connect = 1;
}

message M2C_TestActotLocationResponse // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string Content = 1;
}

message C2M_TestActorLocationMessage // IActorLocationMessage
{
	int32 RpcId = 90;
	string Info = 1;
}

message M2C_TestActorMessage // IActorMessage
{
	 string Contend = 1;
}

//ResponseType A2C_LoginAccount
message C2A_LoginAccount // IRequest
{
	int32 RpcId = 90;
	string AccountName = 1;
	string Password = 2;
}

message A2C_LoginAccount // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string Token  = 1;
	int64 AccountId = 2;
	string Address = 3;
	int64 Key = 4;
	int64 GateId = 5;
}

//ResponseType A2C_RegisterAccount
message C2A_RegisterAccount // IRequest
{
	int32 RpcId = 90;
	string AccountName = 1;
	string Password = 2;
}

message A2C_RegisterAccount // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType A2C_LogoutResponse
message C2A_LogoutRequest // IRequest
{
	int32 RpcId = 90;
}

message A2C_LogoutResponse // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message A2C_Disconnect // IMessage
{
	int32 Error = 1;
}

//ResponseType A2C_CreateChessUnit
message C2A_CreateChessUnit // IRequest
{
	int32 RpcId = 90;

	float X = 1;
	float Y = 2;
	float Z = 3;
}

message A2C_CreateChessUnit // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	UnitInfo Unit = 1;
}

//ResponseType G2C_RefreshShop
message C2G_RefreshShop // IRequest
{
	int32 RpcId = 90;
} 

message G2C_RefreshGold // IMessage
{
	int32 GlodCount = 1;
}

message G2C_RefreshShop // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	repeated int32 championIds = 1;
}

message C2G_EnterChessMapFinish // IMessage
{

}

//ResponseType G2C_BuyChampion
message C2G_BuyChampion // IRequest
{
	int32 RpcId = 90;
	int32 SlopIndex = 1;
}

message G2C_BuyChampion // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	repeated ChampionInfoPB CPInfos = 1;
	UnitInfo UnitInfo  = 2;
}

message G2C_UpdateShppChampion // IMessage
{
	repeated int championIds = 1;
}

enum GridType
{
	OwnInventory = 0;
	ChessMap = 1;
}

message ChampionInfoPB
{
	int32 ConfigId = 1;
	int32 GridPositionX = 2; 
	int32 GridPositionZ = 3; 
	GridType Type = 4; 
	int32 Lv = 5;
}

message G2C_UpdateBonus // IMessage
{
	repeated int32 TypeIdList = 1;
	repeated int32 CountList = 2;
}

//ResponseType G2C_DragChampion
message C2G_DragChampion // IRequest
{
	int32 RpcId = 90;
	int32 OldGridType = 1;
	int32 OldGridPositionX = 2;
	int32 OldGridPositionZ = 3;

	int32 NewGridType = 4;
	int32 NewGridPositionX = 5;
	int32 NewGridPositionZ = 6;
}

message G2C_DragChampion // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message G2C_SyncUnitPos // IMessage
{
	// repeated long UnitIds = 1;
	// repeated MoveInfo MoveInfos = 2;
	long UnitId = 1;
	float X = 2;
	float Y = 3;
	float Z = 4;
	float ForwardX = 5;
	float ForwardY = 6;
	float ForwardZ = 7;
	long MoveToUnitId = 8;
	int32 ChampionConfigId = 9;
}

message G2C_SyncTimer // IMessage
{
	int64 timer = 1;
}

message G2C_CreateCpUnits // IMessage
{
	repeated UnitInfo Units = 1;
	repeated ChampionInfoPB ChampionInfoPBList = 2;
	bool IsPlayer1 = 3;
}

message C2G_SceneReady // IMessage
{

}

message C2G_ExitChessMap // IMessage
{

}

message G2C_ExitChessMap // IMessage
{

}

message G2C_OneCpBattleEnd // IMessage
{
	int32 Result = 1;
}

message G2C_AttackDamage // IMessage
{
	int64 FromId = 1;
	int64 ToId = 2;
	int32 Damage = 3;
	int32 HP = 4;
	int32 MaxHP = 5;
	int64 AttackTime = 6;
}

message G2C_UnitDead // IMessage
{
	int64 UnitId = 1;
}

//ResponseType G2C_StartMatch
message C2G_StartMatch // IRequest
{
	int32 RpcId = 90;
}

message G2C_StartMatch // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message C2G_LeaveMatch // IMessage
{
}

message G2C_MatchSuccess // IMessage
{
	int64 RoomId = 1;
}

message G2C_MatchFail // IMessage
{
}

message G2C_SyncPlayerHp // IMessage
{
	int32 Hp = 1;
}

message G2C_ChessGameOver // IMessage
{
	bool Result = 1;
}

//ResponseType G2C_GetItem
message C2G_GetItem // IRequest
{
	int32 RpcId = 90;
	int32 ItemId = 1;
}	

message G2C_GetItem // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int32 ItemId = 1;
	int32 Count = 2;
}

//ResponseType G2C_AddItem
message C2G_AddItem // IRequest
{
	int32 RpcId = 90;
	int32 ItemId = 1;
	int32 Count = 2;
}

message G2C_AddItem // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int32 ItemId = 1;
	int32 Count = 2;
}

//ResponseType G2C_UseItem
message C2G_UseItem // IRequest
{
	int32 RpcId = 90;
	int32 ItemId = 1;
	int32 Count = 2;
}

message G2C_UseItem // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int32 ItemId = 1;
	int32 Count = 2;
}

message G2C_UpdateLevel // IMessage
{
	int32 Level = 1;
	int32 ChampionLimit = 2;
 	int32 NextLevelCost = 3; // 新增字段:下一级所需费用
}

//ResponseType G2C_LevelUp
message C2G_LevelUp // IRequest
{
	int32 RpcId = 90;
}

message G2C_LevelUp // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message ItemInfo
{
	int32 ItemId = 1;
	int32 Count = 2;
}

//ResponseType G2C_BagInfo
message C2G_BagInfo // IRequest
{
	int32 RpcId = 90;
}

message G2C_BagInfo // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	repeated ItemInfo Items = 1;
}

//ResponseType G2C_BuyHero
message C2G_BuyHero // IRequest
{
    int32 RpcId = 90;
    int32 HeroConfigId = 1;
	string account = 2;
	string password = 3;
}

message G2C_BuyHero // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
    int32 HeroConfigId = 1;
	int32 PointCount = 2;
}

//ResponseType G2C_GetHeroList
message C2G_GetHeroList // IRequest
{
    int32 RpcId = 90;
}

message G2C_GetHeroList // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
    repeated int32 HeroIds = 1;
}

//ResponseType G2C_GetNextGalId
message C2G_GetNextGalId // IRequest
{
    int32 RpcId = 90;
}

message G2C_GetNextGalId // IResponse
{
	int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
	int32 GalId = 1;
}

//ResponseType G2C_PassGal
message C2G_PassGal // IRequest
{
    int32 RpcId = 90;
	int32 GalId = 1;
}

message G2C_PassGal // IResponse
{
	int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
	int32 NextGalId = 1;
}

message G2C_UpdateItem // IMessage
{
	int32 ItemId = 1;	
	int32 ItemCount = 2;	
}

//ResponseType G2C_SumbitExec
message C2G_SumbitExec // IRequest
{
	int32 RpcId = 90;
	int32 ExecId = 1;
}

message G2C_SumbitExec // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

